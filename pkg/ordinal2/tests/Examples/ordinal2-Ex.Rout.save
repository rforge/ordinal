
R version 2.12.2 (2011-02-25)
Copyright (C) 2011 The R Foundation for Statistical Computing
ISBN 3-900051-07-0
Platform: x86_64-pc-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "ordinal2"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> options(pager = "console")
> library('ordinal2')
Loading required package: MASS
Loading required package: ucminf
Loading required package: numDeriv
Loading required package: Matrix
Loading required package: lattice

Attaching package: 'Matrix'

The following object(s) are masked from 'package:base':

    det

> 
> assign(".oldSearch", search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("clm")
> ### * clm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: clm
> ### Title: Cumulative Link Functions
> ### Aliases: clm
> ### Keywords: models
> 
> ### ** Examples
> 
> 
> data(wine)
> fm1 <- clm(rating ~ temp * contact, data = wine)
> fm1 ## print method
formula: rating ~ temp * contact
data:    wine

 link  threshold nobs logLik AIC    niter max.grad
 logit flexible  72   -86.42 186.83 7(0)  5.22e-12

Coefficients:
           tempwarm          contactyes tempwarm:contactyes 
          2.3211843           1.3474604           0.3595489 

Thresholds:
      1|2       2|3       3|4       4|5 
-1.411262  1.143554  3.377082  4.941982 
> summary(fm1)
formula: rating ~ temp * contact
data:    wine

 link  threshold nobs logLik AIC    niter max.grad cond.H 
 logit flexible  72   -86.42 186.83 7(0)  5.22e-12 5.1e+01

Coefficients:
                    Estimate Std. Error z value Pr(>|z|)    
tempwarm              2.3212     0.7009   3.311 0.000928 ***
contactyes            1.3475     0.6604   2.041 0.041300 *  
tempwarm:contactyes   0.3595     0.9238   0.389 0.697129    
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Threshold coefficients:
    Estimate Std. Error z value
1|2  -1.4113     0.5454  -2.588
2|3   1.1436     0.5097   2.244
3|4   3.3771     0.6382   5.292
4|5   4.9420     0.7509   6.581
> anova(fm1, update(fm1, ~.-temp:contact))
Likelihood ratio tests of cumulative link models:
 
  formula:                link: threshold:
1 rating ~ temp * contact logit flexible  
2 rating ~ temp + contact logit flexible  
  no.par    AIC  logLik LR.stat df Pr(>Chisq)
1      7 186.83 -86.416                      
2      6 184.98 -86.492  0.1514  1     0.6972
> 
> dropterm(fm1, test = "Chi")
Single term deletions

Model:
rating ~ temp * contact
             Df    AIC     LRT Pr(Chi)
<none>          186.83                
temp:contact  1 184.98 0.15145  0.6972
> drop1(fm1, test = "Chi")
Single term deletions

Model:
rating ~ temp * contact
             Df    AIC     LRT Pr(Chi)
<none>          186.83                
temp:contact  1 184.98 0.15145  0.6972
> add1(fm1, ~.+judge, test = "Chi")
Single term additions

Model:
rating ~ temp * contact
       Df    AIC    LRT   Pr(Chi)    
<none>    186.83                     
judge   8 171.80 31.036 0.0001384 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
> addterm(fm1, ~.+judge, test = "Chi")
Single term additions

Model:
rating ~ temp * contact
       Df    AIC    LRT   Pr(Chi)    
<none>    186.83                     
judge   8 171.80 31.036 0.0001384 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
> 
> fm2 <- step(fm1)
Start:  AIC=186.83
rating ~ temp * contact

               Df    AIC
- temp:contact  1 184.98
<none>            186.83

Step:  AIC=184.98
rating ~ temp + contact

          Df    AIC
<none>       184.98
- contact  1 194.03
- temp     1 209.91
> summary(fm2)
formula: rating ~ temp + contact
data:    wine

 link  threshold nobs logLik AIC    niter max.grad cond.H 
 logit flexible  72   -86.49 184.98 7(0)  4.01e-12 2.7e+01

Coefficients:
           Estimate Std. Error z value Pr(>|z|)    
tempwarm     2.5031     0.5287   4.735 2.19e-06 ***
contactyes   1.5278     0.4766   3.205  0.00135 ** 
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Threshold coefficients:
    Estimate Std. Error z value
1|2  -1.3444     0.5171  -2.600
2|3   1.2508     0.4379   2.857
3|4   3.4669     0.5978   5.800
4|5   5.0064     0.7309   6.850
> fm3 <- stepAIC(fm1)
Start:  AIC=186.83
rating ~ temp * contact

               Df    AIC
- temp:contact  1 184.98
<none>            186.83

Step:  AIC=184.98
rating ~ temp + contact

          Df    AIC
<none>       184.98
- contact  1 194.03
- temp     1 209.91
> summary(fm3)
formula: rating ~ temp + contact
data:    wine

 link  threshold nobs logLik AIC    niter max.grad cond.H 
 logit flexible  72   -86.49 184.98 7(0)  4.01e-12 2.7e+01

Coefficients:
           Estimate Std. Error z value Pr(>|z|)    
tempwarm     2.5031     0.5287   4.735 2.19e-06 ***
contactyes   1.5278     0.4766   3.205  0.00135 ** 
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Threshold coefficients:
    Estimate Std. Error z value
1|2  -1.3444     0.5171  -2.600
2|3   1.2508     0.4379   2.857
3|4   3.4669     0.5978   5.800
4|5   5.0064     0.7309   6.850
> 
> coef(fm1)
                1|2                 2|3                 3|4                 4|5 
         -1.4112620           1.1435537           3.3770825           4.9419823 
           tempwarm          contactyes tempwarm:contactyes 
          2.3211843           1.3474604           0.3595489 
> vcov(fm1)
                           1|2        2|3        3|4        4|5   tempwarm
1|2                  0.2974102  0.1433319  0.1434281  0.1437944  0.1470096
2|3                  0.1433319  0.2597488  0.2498799  0.2501820  0.2521417
3|4                  0.1434281  0.2498799  0.4072504  0.3976946  0.3249357
4|5                  0.1437944  0.2501820  0.3976946  0.5638677  0.3317317
tempwarm             0.1470096  0.2521417  0.3249357  0.3317317  0.4913280
contactyes           0.1565436  0.2477552  0.2730741  0.2730982  0.2581980
tempwarm:contactyes -0.1598445 -0.2494219 -0.2039255 -0.1408440 -0.4256882
                    contactyes tempwarm:contactyes
1|2                  0.1565436          -0.1598445
2|3                  0.2477552          -0.2494219
3|4                  0.2730741          -0.2039255
4|5                  0.2730982          -0.1408440
tempwarm             0.2581980          -0.4256882
contactyes           0.4360696          -0.4226690
tempwarm:contactyes -0.4226690           0.8534413
> AIC(fm1)
[1] 186.8324
> extractAIC(fm1)
[1]   7.0000 186.8324
> logLik(fm1)
'log Lik.' -86.4162 (df=7)
> fitted(fm1)
 [1] 0.56229641 0.20864908 0.43467309 0.08938852 0.19028226 0.19028226
 [7] 0.28622518 0.28622518 0.19603509 0.56229641 0.05959593 0.43467309
[13] 0.21210373 0.50642742 0.28622518 0.37103562 0.56229641 0.20864908
[19] 0.43467309 0.38960327 0.06781183 0.06781183 0.37103562 0.37103562
[25] 0.20864908 0.56229641 0.43467309 0.38960327 0.50642742 0.21210373
[31] 0.28622518 0.28982109 0.56229641 0.20864908 0.08938852 0.43467309
[37] 0.50642742 0.50642742 0.28982109 0.28982109 0.20864908 0.56229641
[43] 0.43467309 0.38960327 0.21210373 0.19028226 0.28622518 0.37103562
[49] 0.19603509 0.19603509 0.38960327 0.38960327 0.21210373 0.50642742
[55] 0.04859504 0.28982109 0.56229641 0.56229641 0.38960327 0.43467309
[61] 0.50642742 0.50642742 0.28982109 0.37103562 0.19603509 0.56229641
[67] 0.43467309 0.38960327 0.50642742 0.21210373 0.37103562 0.37103562
> 
> confint(fm1) ## type = "profile"
Waiting for profiling to be done...
                          2.5 %   97.5 %
tempwarm             0.99435182 3.761793
contactyes           0.08378091 2.694828
tempwarm:contactyes -1.45985126 2.180286
> confint(fm1, type = "Wald")
                          2.5 %   97.5 %
tempwarm             0.94735154 3.695017
contactyes           0.05318714 2.641734
tempwarm:contactyes -1.45110279 2.170201
> pr1 <- profile(fm1)
> confint(pr1)
                          2.5 %   97.5 %
tempwarm             0.99438454 3.761828
contactyes           0.08379044 2.694864
tempwarm:contactyes -1.45984555 2.180280
> 
> ## plotting the profiles:
> par(mfrow = c(2, 2))
> plot(pr1, root = TRUE) ## check for linearity 
> par(mfrow = c(2, 2))
> plot(pr1)
> par(mfrow = c(2, 2))
> plot(pr1, approx = TRUE)
> par(mfrow = c(2, 2))
> plot(pr1, Log = TRUE)
> par(mfrow = c(2, 2))
> plot(pr1, Log = TRUE, relative = FALSE)
> 
> ## other link functions:
> fm4.lgt <- update(fm1, link = "logit") ## default
> fm4.prt <- update(fm1, link = "probit")
> fm4.ll <- update(fm1, link = "loglog")
> fm4.cll <- update(fm1, link = "cloglog")
> fm4.cct <- update(fm1, link = "cauchit")
> anova(fm4.lgt, fm4.prt, fm4.ll, fm4.cll, fm4.cct)
Likelihood ratio tests of cumulative link models:
 
  formula:                link:   threshold:
1 rating ~ temp * contact logit   flexible  
2 rating ~ temp * contact probit  flexible  
3 rating ~ temp * contact loglog  flexible  
4 rating ~ temp * contact cloglog flexible  
5 rating ~ temp * contact cauchit flexible  
  no.par    AIC  logLik LR.stat df Pr(>Chisq)
1      7 186.83 -86.416                      
2      7 185.45 -85.723 -1.3864  0           
3      7 189.14 -87.569  3.6923  0           
4      7 187.22 -86.610 -1.9175  0           
5      7 198.05 -92.027 10.8323  0           
> 
> ## structured thresholds:
> fm5 <- update(fm1, threshold = "symmetric")
> fm6 <- update(fm1, threshold = "equidistant")
> anova(fm1, fm5, fm6)
Likelihood ratio tests of cumulative link models:
 
  formula:                link: threshold: 
1 rating ~ temp * contact logit flexible   
2 rating ~ temp * contact logit symmetric  
3 rating ~ temp * contact logit equidistant
  no.par    AIC  logLik LR.stat df Pr(>Chisq)
1      7 186.83 -86.416                      
2      6 187.05 -87.527  2.2220  1     0.1361
3      5 185.14 -87.570  0.0864  1     0.7688
> 
> ## the slice methods:
> slice.fm1 <- slice(fm1)
> par(mfrow = c(3, 3))
> plot(slice.fm1)
> ## see more at '?slice.clm'
> 
> ## Example from MASS::polr:
> data(housing, package = "MASS")
> fm1 <- clm(Sat ~ Infl + Type + Cont, weights = Freq, data = housing)
> summary(fm1)
formula: Sat ~ Infl + Type + Cont
data:    housing

 link  threshold nobs logLik   AIC     niter max.grad cond.H 
 logit flexible  1681 -1739.57 3495.15 5(0)  6.60e-09 4.7e+01

Coefficients:
              Estimate Std. Error z value Pr(>|z|)    
InflMedium     0.56639    0.10465   5.412 6.23e-08 ***
InflHigh       1.28882    0.12716  10.136  < 2e-16 ***
TypeApartment -0.57235    0.11924  -4.800 1.59e-06 ***
TypeAtrium    -0.36619    0.15517  -2.360 0.018282 *  
TypeTerrace   -1.09101    0.15149  -7.202 5.93e-13 ***
ContHigh       0.36028    0.09554   3.771 0.000162 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Threshold coefficients:
            Estimate Std. Error z value
Low|Medium   -0.4961     0.1248  -3.974
Medium|High   0.6907     0.1255   5.505
> 
> ## Another example:
> data(soup, package = "ordinal")
> 
> fm.soup <- clm(SURENESS ~ PRODID, data = soup)
> summary(fm.soup)
formula: SURENESS ~ PRODID
data:    soup

 link  threshold nobs logLik   AIC     niter max.grad cond.H 
 logit flexible  1847 -2677.27 5374.54 7(1)  3.77e-13 2.3e+02

Coefficients:
        Estimate Std. Error z value Pr(>|z|)    
PRODID2   0.8925     0.1184   7.540 4.70e-14 ***
PRODID3   1.4477     0.1663   8.706  < 2e-16 ***
PRODID4   0.8325     0.1532   5.433 5.55e-08 ***
PRODID5   1.3109     0.1630   8.042 8.85e-16 ***
PRODID6   1.6010     0.1690   9.475  < 2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Threshold coefficients:
    Estimate Std. Error z value
1|2 -1.41244    0.08184 -17.258
2|3 -0.42924    0.06972  -6.157
3|4 -0.10340    0.06891  -1.500
4|5  0.15121    0.06906   2.189
5|6  0.82121    0.07201  11.404
> 
> 
> 
> 
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> cleanEx()
> nameEx("clm.fit")
> ### * clm.fit
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: clm.fit
> ### Title: fit cumulative link functions
> ### Aliases: clm.fit
> ### Keywords: models
> 
> ### ** Examples
> 
> ##---- Should be DIRECTLY executable !! ----
> ##-- ==>  Define data, use random,
> ##--	or do  help(data=index)  for the standard data sets.
> 
> 
> 
> cleanEx()
> nameEx("clmm")
> ### * clmm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: clmm
> ### Title: Cumulative Link Mixed Models
> ### Aliases: clmm
> ### Keywords: models
> 
> ### ** Examples
> 
> 
> ## Get test data:
> data(soup, package = "ordinal")
> 
> ## Cumulative link mixed model with two random terms:
> mm1 <- clmm(SURENESS ~ PROD + (1|RESP) + (1|RESP:PROD), data = soup,
+             link = "probit", threshold = "equidistant")
> mm1
Cumulative Link Mixed Model fitted with the Laplace approximation

Call:
clmm(formula = SURENESS ~ PROD + (1 | RESP) + (1 | RESP:PROD), 
    data = soup, link = "probit", threshold = "equidistant")

Random effects:
                 Var   Std.Dev
RESP:PROD 0.14826108 0.3850469
RESP      0.04491878 0.2119405

Coefficients:
 PRODTest 
0.7422646 

Thresholds:
threshold.1     spacing 
 -0.8110438   0.3344397 

log-likelihood: -2763.463 
AIC: 5536.926 
> summary(mm1)
Cumulative Link Mixed Model fitted with the Laplace approximation

Call:
clmm(formula = SURENESS ~ PROD + (1 | RESP) + (1 | RESP:PROD), 
    data = soup, link = "probit", threshold = "equidistant")

Random effects:
                 Var   Std.Dev
RESP:PROD 0.14826108 0.3850469
RESP      0.04491878 0.2119405

Coefficients:
         Estimate Std. Error z value  Pr(>|z|)  
PRODTest   0.7423   0.0680    10.9117 < 2.22e-16

Threshold coefficients:
            Estimate Std. Error z value 
threshold.1  -0.8110   0.0560   -14.4894
spacing       0.3344   0.0106    31.6184

log-likelihood: -2763.463 
AIC: 5536.926 
Condition number of Hessian: 2428.774 
> 
> 
> 
> 
> cleanEx()
> nameEx("dropCoef")
> ### * dropCoef
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: drop.coef
> ### Title: Insure Full Rank Design Matrix
> ### Aliases: drop.coef
> ### Keywords: models
> 
> ### ** Examples
> 
> 
> data(soup, package = "ordinal")
> X <- model.matrix( ~ PRODID * DAY, data = soup)
> ncol(X)
[1] 12
> newX <- drop.coef(X)
design is rank deficient so dropping 1 coef
> ncol(newX)
[1] 11
> 
> ## Essentially this is being computed:
> qr.X <- qr(X, tol = 1e-7, LAPACK = FALSE)
> newX <- X[, qr.X$pivot[1:qr.X$rank], drop = FALSE]
> ## is newX of full column rank?
> ncol(newX) == qr(newX)$rank
[1] TRUE
> ## the number of columns being dropped:
> ncol(X) - ncol(newX)
[1] 1
> 
> 
> 
> 
> cleanEx()
> nameEx("gfun")
> ### * gfun
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: gfun
> ### Title: Gradients of common densities
> ### Aliases: gnorm glogis gcauchy
> ### Keywords: models
> 
> ### ** Examples
> 
> 
> x <- -5:5
> gnorm(x)
 [1]  7.433598e-06  5.353209e-04  1.329555e-02  1.079819e-01  2.419707e-01
 [6]  0.000000e+00 -2.419707e-01 -1.079819e-01 -1.329555e-02 -5.353209e-04
[11] -7.433598e-06
> glogis(x)
 [1]  0.006559068  0.017027336  0.040891575  0.079962501  0.090857748
 [6]  0.000000000 -0.090857748 -0.079962501 -0.040891575 -0.017027336
[11] -0.006559068
> gcauchy(x)
 [1]  0.004708726  0.008811346  0.019098593  0.050929582  0.159154943
 [6]  0.000000000 -0.159154943 -0.050929582 -0.019098593 -0.008811346
[11] -0.004708726
> 
> 
> 
> 
> cleanEx()
> nameEx("gumbel")
> ### * gumbel
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: gumbel
> ### Title: The Gumbel distribution
> ### Aliases: dgumbel pgumbel ggumbel dgumbel2 pgumbel2 ggumbel2
> ### Keywords: models
> 
> ### ** Examples
> 
> 
> ## Illustrating the symmetry of the distribution functions:
> pgumbel(5) == 1 - pgumbel2(-5) ## TRUE
[1] TRUE
> dgumbel(5) == dgumbel2(-5)     ## TRUE
[1] TRUE
> ggumbel(5) == -ggumbel2(-5)    ## TRUE
[1] TRUE
> 
> ## More examples:
> x <- -5:5
> 
> pgumbel(x)
 [1] 3.507389e-65 1.942338e-24 1.892179e-09 6.179790e-04 6.598804e-02
 [6] 3.678794e-01 6.922006e-01 8.734230e-01 9.514320e-01 9.818511e-01
[11] 9.932847e-01
> dgumbel(x)
 [1] 5.205427e-63 1.060480e-22 3.800543e-08 4.566281e-03 1.793741e-01
 [6] 3.678794e-01 2.546464e-01 1.182050e-01 4.736901e-02 1.798323e-02
[11] 6.692700e-03
> ggumbel(x)
 [1]  7.673485e-61  5.683979e-21  7.253539e-07  2.917423e-02  3.082152e-01
 [6]  0.000000e+00 -1.609672e-01 -1.022077e-01 -4.501065e-02 -1.765386e-02
[11] -6.647605e-03
> 
> pgumbel2(x)
 [1] 0.006715298 0.018148927 0.048568007 0.126576982 0.307799372 0.632120559
 [7] 0.934011964 0.999382021 0.999999998 1.000000000 1.000000000
> dgumbel2(x)
 [1] 6.692700e-03 1.798323e-02 4.736901e-02 1.182050e-01 2.546464e-01
 [6] 3.678794e-01 1.793741e-01 4.566281e-03 3.800543e-08 1.060480e-22
[11] 5.205427e-63
> ggumbel2(x)
 [1]  6.647605e-03  1.765386e-02  4.501065e-02  1.022077e-01  1.609672e-01
 [6]  0.000000e+00 -3.082152e-01 -2.917423e-02 -7.253539e-07 -5.683979e-21
[11] -7.673485e-61
> 
> 
> 
> 
> cleanEx()
> nameEx("lgamma")
> ### * lgamma
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: lgamma
> ### Title: The log-gamma distribution
> ### Aliases: plgamma dlgamma glgamma
> ### Keywords: models
> 
> ### ** Examples
> 
> 
> ## Illustrating the link to other distribution functions: 
> x <- -5:5
> plgamma(x, lambda = 0) == pnorm(x)
 [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
> all.equal(plgamma(x, lambda = -1), pgumbel(x)) ## TRUE, but:
[1] TRUE
> plgamma(x, lambda = -1) == pgumbel(x)
 [1] FALSE FALSE FALSE FALSE  TRUE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE
> plgamma(x, lambda = 1) == pgumbel2(x)
 [1] FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE
> 
> dlgamma(x, lambda = 0) == dnorm(x)
 [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
> dlgamma(x, lambda = -1) == dgumbel(x)
 [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
> dlgamma(x, lambda = 1) == dgumbel2(x)
 [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
> 
> glgamma(x, lambda = 0) == gnorm(x)
 [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
> all.equal(glgamma(x, lambda = -1), ggumbel(x)) ## TRUE, but:
[1] TRUE
> glgamma(x, lambda = -1) == ggumbel(x)
 [1]  TRUE FALSE FALSE FALSE  TRUE  TRUE FALSE FALSE FALSE  TRUE FALSE
> all.equal(glgamma(x, lambda = 1), ggumbel2(x)) ## TRUE, but:
[1] TRUE
> glgamma(x, lambda = 1) == ggumbel2(x)
 [1] FALSE  TRUE FALSE FALSE FALSE  TRUE  TRUE FALSE FALSE FALSE  TRUE
> ## There is a loss of accuracy, but the difference is very small: 
> glgamma(x, lambda = 1) - ggumbel2(x)
 [1] -8.673617e-19  0.000000e+00 -1.387779e-17 -1.387779e-17 -2.775558e-17
 [6]  0.000000e+00  0.000000e+00  3.469447e-18  1.058791e-22 -7.523164e-37
[11]  0.000000e+00
> 
> ## More examples:
> x <- -5:5
> plgamma(x, lambda = .5)
 [1] 0.0003729435 0.0023299245 0.0130924716 0.0621186950 0.2267546348
 [6] 0.5665298796 0.8945151191 0.9945917346 0.9999813218 0.9999999993
[11] 1.0000000000
> dlgamma(x, lambda = .5)
 [1] 6.974573e-04 4.164869e-03 2.166083e-02 8.970337e-02 2.551632e-01
 [6] 3.907336e-01 2.155388e-01 2.208500e-02 1.410374e-04 9.274904e-09
[11] 3.227334e-16
> glgamma(x, lambda = .5)
 [1]  1.280413e-03  7.202431e-03  3.365529e-02  1.134067e-01  2.007978e-01
 [6]  0.000000e+00 -2.796492e-01 -7.589652e-02 -9.820967e-04 -1.185158e-07
[11] -7.217929e-15
> 
> 
> 
> 
> cleanEx()
> nameEx("ordinal2-package")
> ### * ordinal2-package
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: trialPkg-package
> ### Title: What the package does (short line) ~~ package title ~~
> ### Aliases: trialPkg-package trialPkg
> ### Keywords: package
> 
> ### ** Examples
> 
> ## ~~ simple examples of the most important functions ~~
> 
> 
> 
> cleanEx()
> nameEx("slice.clm")
> ### * slice.clm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: slice.clm
> ### Title: Slice the likelihood of a clm
> ### Aliases: slice slice.clm plot.slice.clm
> ### Keywords: models
> 
> ### ** Examples
> 
> 
> ## get data:
> data(wine)
> ## fit model:
> fm1 <- clm(rating ~ contact + temp, data = wine)
> ## slice the likelihood:
> sl1 <- slice(fm1)
> 
> ## three different ways to plot the slices:
> par(mfrow = c(2,3))
> plot(sl1)
> plot(sl1, type = "quadratic", plot.mle = FALSE)
> plot(sl1, type = "linear")
> 
> ## Verify convergence to the optimum:
> sl2 <- slice(fm1, lambda = 1e-5, quad.approx = FALSE)
> plot(sl2)
> 
> 
> 
> 
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> cleanEx()
> nameEx("wine")
> ### * wine
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: wine
> ### Title: Bitterness of wine
> ### Aliases: wine
> ### Keywords: datasets
> 
> ### ** Examples
> 
> 
> data(wine)
> 
> ## Variables 'rating' and 'response' are related in the following way: 
> (intervals <- seq(0,100, by = 20))
[1]   0  20  40  60  80 100
> all(wine$rating == findInterval(wine$response, intervals)) ## ok
[1] TRUE
> 
> ## A few illustrative tabulations:
> ## Table matching Table 5 in Randall (1989):
> temp.contact.bottle <- with(wine, temp:contact:bottle)[drop=TRUE]
> xtabs(response ~ temp.contact.bottle + judge, data = wine)
                   judge
temp.contact.bottle  1  2  3  4  5  6  7  8  9
         cold:no:1  36 17 36 46 26 46 13 25 12
         cold:no:2  48 22 50 27 45 30 19 32 29
         cold:yes:3 47 14 42 48 61 54 31 39 47
         cold:yes:4 67 50 23 32 41 37 29 40 28
         warm:no:5  77 30 80 57 48 32 22 51 47
         warm:no:6  60 51 81 37 41 60 43 45 38
         warm:yes:7 83 90 73 84 58 88 32 42 72
         warm:yes:8 90 70 62 58 55 73 49 67 65
> 
> ## Table matching Table 6 in Randall (1989):
> with(wine, {
+   tcb <- temp:contact:bottle
+   tcb <- tcb[drop=TRUE]
+   table(tcb, rating)
+ })
            rating
tcb          1 2 3 4 5
  cold:no:1  3 4 2 0 0
  cold:no:2  1 5 3 0 0
  cold:yes:3 1 2 5 1 0
  cold:yes:4 0 5 3 1 0
  warm:no:5  0 3 4 1 1
  warm:no:6  0 2 4 2 1
  warm:yes:7 0 1 2 2 4
  warm:yes:8 0 0 3 5 1
> ## or simply: with(wine, table(bottle, rating))
> 
> ## Table matching Table 1 in Tutz & Hennevogl (1996):
> tab <- xtabs(as.numeric(rating) ~ judge + temp.contact.bottle, 
+              data = wine)
> colnames(tab) <- 
+   paste(rep(c("c","w"), each = 4), rep(c("n", "n", "y", "y"), 2), 
+         1:8, sep=".")
> tab
     temp.contact.bottle
judge c.n.1 c.n.2 c.y.3 c.y.4 w.n.5 w.n.6 w.y.7 w.y.8
    1     2     3     3     4     4     4     5     5
    2     1     2     1     3     2     3     5     4
    3     2     3     3     2     5     5     4     4
    4     3     2     3     2     3     2     5     3
    5     2     3     4     3     3     3     3     3
    6     3     2     3     2     2     4     5     4
    7     1     1     2     2     2     3     2     3
    8     2     2     2     3     3     3     3     4
    9     1     2     3     2     3     2     4     4
> 
> 
> ## A simple model:
> m1 <- clm(rating ~ temp * contact, data = wine)
> summary(m1)
formula: rating ~ temp * contact
data:    wine

 link  threshold nobs logLik AIC    niter max.grad cond.H 
 logit flexible  72   -86.42 186.83 7(0)  5.22e-12 5.1e+01

Coefficients:
                    Estimate Std. Error z value Pr(>|z|)    
tempwarm              2.3212     0.7009   3.311 0.000928 ***
contactyes            1.3475     0.6604   2.041 0.041300 *  
tempwarm:contactyes   0.3595     0.9238   0.389 0.697129    
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Threshold coefficients:
    Estimate Std. Error z value
1|2  -1.4113     0.5454  -2.588
2|3   1.1436     0.5097   2.244
3|4   3.3771     0.6382   5.292
4|5   4.9420     0.7509   6.581
> 
> 
> 
> 
> ### * <FOOTER>
> ###
> cat("Time elapsed: ", proc.time() - get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  13.53 0.09 13.62 NA NA 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
